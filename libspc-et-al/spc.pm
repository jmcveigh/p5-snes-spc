# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package spc;
use base qw(Exporter);
use base qw(DynaLoader);
package spcc;
bootstrap spc;
package spc;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package spc;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package spc;

*cdata = *spcc::cdata;
*memmove = *spcc::memmove;
*new_long_ptr = *spcc::new_long_ptr;
*copy_long_ptr = *spcc::copy_long_ptr;
*delete_long_ptr = *spcc::delete_long_ptr;
*long_ptr_assign = *spcc::long_ptr_assign;
*long_ptr_value = *spcc::long_ptr_value;
*new_short_arr = *spcc::new_short_arr;
*delete_short_arr = *spcc::delete_short_arr;
*short_arr_getitem = *spcc::short_arr_getitem;
*short_arr_setitem = *spcc::short_arr_setitem;
*spc_new = *spcc::spc_new;
*spc_delete = *spcc::spc_delete;
*spc_init_rom = *spcc::spc_init_rom;
*spc_set_output = *spcc::spc_set_output;
*spc_sample_count = *spcc::spc_sample_count;
*spc_reset = *spcc::spc_reset;
*spc_soft_reset = *spcc::spc_soft_reset;
*spc_read_port = *spcc::spc_read_port;
*spc_write_port = *spcc::spc_write_port;
*spc_end_frame = *spcc::spc_end_frame;
*spc_mute_voices = *spcc::spc_mute_voices;
*spc_disable_surround = *spcc::spc_disable_surround;
*spc_set_tempo = *spcc::spc_set_tempo;
*spc_load_spc = *spcc::spc_load_spc;
*spc_clear_echo = *spcc::spc_clear_echo;
*spc_play = *spcc::spc_play;
*spc_skip = *spcc::spc_skip;
*spc_copy_state = *spcc::spc_copy_state;
*spc_init_header = *spcc::spc_init_header;
*spc_save_spc = *spcc::spc_save_spc;
*spc_check_kon = *spcc::spc_check_kon;
*spc_filter_new = *spcc::spc_filter_new;
*spc_filter_delete = *spcc::spc_filter_delete;
*spc_filter_run = *spcc::spc_filter_run;
*spc_filter_clear = *spcc::spc_filter_clear;
*spc_filter_set_gain = *spcc::spc_filter_set_gain;
*spc_filter_set_bass = *spcc::spc_filter_set_bass;
*error = *spcc::error;
*load_file = *spcc::load_file;
*write_file = *spcc::write_file;
*wave_open = *spcc::wave_open;
*wave_enable_stereo = *spcc::wave_enable_stereo;
*wave_write = *spcc::wave_write;
*wave_sample_count = *spcc::wave_sample_count;
*wave_close = *spcc::wave_close;

# ------- VARIABLE STUBS --------

package spc;

*spc_sample_rate = *spcc::spc_sample_rate;
*spc_rom_size = *spcc::spc_rom_size;
*spc_clock_rate = *spcc::spc_clock_rate;
*spc_clocks_per_sample = *spcc::spc_clocks_per_sample;
*spc_port_count = *spcc::spc_port_count;
*spc_voice_count = *spcc::spc_voice_count;
*spc_tempo_unit = *spcc::spc_tempo_unit;
*spc_state_size = *spcc::spc_state_size;
*spc_file_size = *spcc::spc_file_size;
*spc_filter_gain_unit = *spcc::spc_filter_gain_unit;
*spc_filter_bass_none = *spcc::spc_filter_bass_none;
*spc_filter_bass_norm = *spcc::spc_filter_bass_norm;
*spc_filter_bass_max = *spcc::spc_filter_bass_max;
1;
